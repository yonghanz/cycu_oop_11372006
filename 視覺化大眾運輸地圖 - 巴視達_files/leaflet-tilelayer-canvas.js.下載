//https://github.com/GIAPspzoo/L.TileLayer.Canvas
L.TileLayer.Canvas = L.TileLayer.extend({
  _delays: {},
  _delaysForZoom: null,
  createCanvas: function createCanvas(tile, coords, done) {
    var err;
    var ctx = tile.getContext("2d");

    //const {doubleSize} = this.options;
    //const {x: width, y: height} = this.getTileSize();
    //tile.width = doubleSize ? width * 2 : width;
    //tile.height = doubleSize ? height * 2 : height;
    //console.log(width + ", " + height);
    //console.log(doubleSize);
    //console.log(tile.width + ", " + tile.height);

    var img = new Image();
    img.onerror = this._tileOnError.bind(this, done, img);
    img.onload = function () {
      try {
        tile.width = img.naturalWidth;
        tile.height = img.naturalHeight;
        ctx.drawImage(img, 0, 0);
        tile.complete = true;
      } catch (e) {
        err = e;
      } finally {
        done(err, tile);
      }
    };
    var tileZoom = this._getZoomForUrl();
    var crossOrigin = this.options.crossOrigin;
    img.src = isNaN(tileZoom) ? "" : this.getTileUrl(coords);
    img.crossOrigin = crossOrigin;
    var key = this._tileCoordsToKey(coords);
    this._tilesImages[key] = img;
  },
  createTile: function createTile(coords, done) {
    var timeout = this.options.timeout;
    var zoom = coords.z;
    var tile = document.createElement("canvas");
    if (timeout) {
      if (zoom !== this._delaysForZoom) {
        this._clearDelaysForZoom();
        this._delaysForZoom = zoom;
      }
      if (!this._delays[zoom]) this._delays[zoom] = [];
      this._delays[zoom].push(
        setTimeout(function () {
          this.createCanvas(tile, coords, done);
        }, timeout)
      );
    } else {
      this.createCanvas(tile, coords, done);
    }
    return tile;
  },
  onAdd: function onAdd() {
    this._initContainer();
    this._levels = {};
    this._tiles = {};
    this._tilesImages = {};
    this._resetView();
    this._update();
  },
  _clearDelaysForZoom: function _clearDelaysForZoom() {
    var prevZoom = this._delaysForZoom;
    var delays = this._delays[prevZoom];
    if (!delays) return;
    delays.forEach(function (delay, index) {
      clearTimeout(delay);
      delete delays[index];
    });
    delete this._delays[prevZoom];
  },
  _abortLoading: function _abortLoading() {
    var i, tile, img;
    for (i in this._tiles) {
      if (this._tiles[i].coords.z !== this._tileZoom) {
        img = this._tilesImages[i] || {};
        tile = this._tiles[i].el;
        img.onload = L.Util.falseFn;
        img.onerror = L.Util.falseFn;
        if (!tile.complete) {
          img.src = L.Util.emptyImageUrl;
          L.DomUtil.remove(img);
          delete this._tilesImages[i];
          delete this._tiles[i];
        }
      }
    }
  }
});
L.tileLayer.canvas = function tileLayerCanvas(url, options) {
  return new L.TileLayer.Canvas(url, options);
};