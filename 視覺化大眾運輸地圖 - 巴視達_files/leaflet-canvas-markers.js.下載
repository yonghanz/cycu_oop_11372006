"use strict";
//============================================================================================================
function _construct(Parent, args, Class)
{
 if (_isNativeReflectConstruct())
 {
  _construct = Reflect.construct.bind();
 }
 else
 {
  _construct = function _construct(Parent, args, Class)
  {
   var a = [null];
   a.push.apply(a, args);
   var Constructor = Function.bind.apply(Parent, a);
   var instance = new Constructor();
   if (Class)
    _setPrototypeOf(instance, Class.prototype);
   return instance;
  };
 }
 return _construct.apply(null, arguments);
}
//============================================================================================================
function _isNativeReflectConstruct()
{
 if (typeof Reflect === "undefined" || !Reflect.construct)
  return false;
 if (Reflect.construct.sham)
  return false;
 if (typeof Proxy === "function")
  return true;
 try
 {
  Boolean.prototype.valueOf.call(
   Reflect.construct(Boolean, [], function ()  {}
   ));
  return true;
 }
 catch (e)
 {
  return false;
 }
}
//============================================================================================================
function _setPrototypeOf(o, p)
{
 _setPrototypeOf = (Object.setPrototypeOf) ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p)
 {
  o.__proto__ = p;
  return o;
 };
 return _setPrototypeOf(o, p);
}
//============================================================================================================
function _toConsumableArray(arr)
{
 return (
  _arrayWithoutHoles(arr) ||
  _iterableToArray(arr) ||
  _unsupportedIterableToArray(arr) ||
  _nonIterableSpread());
}
//============================================================================================================
function _nonIterableSpread()
{
 throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
//============================================================================================================
function _unsupportedIterableToArray(o, minLen)
{
 if (!o)
  return;
 if (typeof o === "string")
  return _arrayLikeToArray(o, minLen);
 var n = Object.prototype.toString.call(o).slice(8, -1);
 if (n === "Object" && o.constructor)
  n = o.constructor.name;
 if (n === "Map" || n === "Set")
  return Array.from(o);
 if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
  return _arrayLikeToArray(o, minLen);
}
//============================================================================================================
function _iterableToArray(iter)
{
 if (
  (typeof Symbol !== "undefined" && iter[Symbol.iterator] !== null) ||
  iter["@@iterator"] !== null)
  return Array.from(iter);
}
//============================================================================================================
function _arrayWithoutHoles(arr)
{
 if (Array.isArray(arr))
  return _arrayLikeToArray(arr);
}
//============================================================================================================
function _arrayLikeToArray(arr, len)
{
 if (len === null || len > arr.length)
  len = arr.length;
 for (var i = 0, arr2 = new Array(len); i < len; i++)
 {
  arr2[i] = arr[i];
 }
 return arr2;
}
//============================================================================================================
function _typeof(obj)
{
 "@babel/helpers - typeof";
 return (
  (_typeof =
    "function" === typeof Symbol && "symbol" === typeof Symbol.iterator
     ? function (obj)
  {
   return typeof obj;
  }
    : function (obj)
  {
   return obj &&
   "function" === typeof Symbol &&
   obj.constructor === Symbol &&
   obj !== Symbol.prototype
    ? "symbol"
    : typeof obj;
  }
  ),
  _typeof(obj));
}
//============================================================================================================
(function (root, factory)
{
 if (typeof define === "function" && define.amd)
 {
  define(["leaflet"], factory);
 }
 else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object")
 {
  module.exports = factory(require("leaflet"));
 }
 else
 {
  factory(window.L);
 }
}
)(void 0, function (L)
{
 //------------------------------------------------------------------------------------------------------------
 var SpriteCanvas = document.createElement("canvas");
 var SpriteContext = SpriteCanvas.getContext("2d", {willReadFrequently: true});
 var SpriteImage = document.createElement("img");
 L.BusMarkSize = -1;
 SpriteImage.src = "./Image/Bus_Arrow_All.png?ver=2024_09_23";
 var LabelValue = "";
 var LabelOffsetX = 0;
 var LabelOffsetY = 0;
 //------------------------------------------------------------------------------------------------------------
 L.Canvas.include(
 {
  _updateImg: function _updateImg(layer)
  {
   //return;
   //------------------------------------------------------
   if(L.BusMark_RedrawSkip === true) //檢查是否為不須繪製項目
   {
    return; //略過繪製
   }
   //------------------------------------------------------
   //console.log("Redraw_updateImg");
   var BusMarkDisplayLevel = 0;   
   var img = layer.options.img;
   var p = layer._point.round();
   p.x += img.offset.x;
   p.y += img.offset.y;
   //------------------------------------------------------
   if((L.BusMarkSize === -1) || (L.BusMarkSize !== img.size[0])) //檢查圖片大小是否有設定
   {
    var ResizeSteps = 0;
    if (img.url === "@SpriteImage")
    {
     if (SpriteImage.width === 0 || SpriteImage.height === 0)
     {
      return;
     }
     SpriteCanvas.width = SpriteImage.width;
     SpriteCanvas.height = SpriteImage.height;
     SpriteContext.drawImage(SpriteImage, 0, 0);
     //ResizeSteps = (SpriteCanvas.width / (img.size[0] * 8)) >> 1;
    }
    else
    {
     SpriteCanvas.width = img.el.width;
     SpriteCanvas.height = img.el.height;
     //ResizeSteps = (SpriteCanvas.width / img.size[0]) >> 1;
    }
    //if (typeof this._ctx.filter !== "undefined")
    //{
    // SpriteContext.filter = 'blur(' + String(ResizeSteps) + 'px)'; //模糊處理
    //}
    //if(img.url === "@SpriteImage")
    //{
    // SpriteContext.drawImage(SpriteImage, 0, 0);
    //}
    //else
    //{
    // SpriteContext.drawImage(img.el, 0, 0);
    //}
    //document.querySelector("#TestImage1").src = SpriteCanvas.toDataURL();

    var width_source = SpriteImage.width;
    var height_source = SpriteImage.height;
    var ViewportScale = window.devicePixelRatio; //取得螢幕Scale比例
    if(!ViewportScale) //檢查是否沒有螢幕Scale比例
    {
     var check = false;
     (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
     ViewportScale = ((check === true) ? 2 : 1); //取得預設比例值
    }
    var widthX = Math.round(img.size[0] * 8 * ViewportScale);
    var heightX = Math.round(img.size[1] * 8 * ViewportScale);
    var ratio_w = width_source / widthX;
    var ratio_h = height_source / heightX;
    var ratio_w_half = Math.ceil(ratio_w / 2);
    var ratio_h_half = Math.ceil(ratio_h / 2);
    var imgX = SpriteContext.getImageData(0, 0, width_source, height_source);
    var img2X = SpriteContext.createImageData(widthX, heightX);
    var data = imgX.data;
    var data2 = img2X.data;
    for (var j = 0; j < heightX; j++)
    {
     for (var i = 0; i < widthX; i++)
     {
      var x2 = (i + j * widthX) * 4;
      var weight = 0;
      var weights = 0;
      var weights_alpha = 0;
      var gx_r = 0;
      var gx_g = 0;
      var gx_b = 0;
      var gx_a = 0;
      var center_y = (j + 0.5) * ratio_h;
      var yy_start = Math.floor(j * ratio_h);
      var yy_stop = Math.ceil((j + 1) * ratio_h);
      for (var yy = yy_start; yy < yy_stop; yy++)
      {
       var dy = Math.abs(center_y - (yy + 0.5)) / ratio_h_half;
       var center_x = (i + 0.5) * ratio_w;
       var w0 = dy * dy; //pre-calc part of w
       var xx_start = Math.floor(i * ratio_w);
       var xx_stop = Math.ceil((i + 1) * ratio_w);
       for (var xx = xx_start; xx < xx_stop; xx++)
       {
        var dx = Math.abs(center_x - (xx + 0.5)) / ratio_w_half;
        var w = Math.sqrt(w0 + dx * dx);
        if (w >= 1)
        {
         continue; //pixel too far
        }
        //hermite filter
        weight = 2 * w * w * w - 3 * w * w + 1;
        var pos_x = 4 * (xx + yy * width_source);
        //alpha
        gx_a += weight * data[pos_x + 3];
        weights_alpha += weight;
        //colors
        if (data[pos_x + 3] < 255)
        {
         weight = (weight * data[pos_x + 3]) / 250;
        }
        gx_r += weight * data[pos_x];
        gx_g += weight * data[pos_x + 1];
        gx_b += weight * data[pos_x + 2];
        weights += weight;
       }
      }
      data2[x2] = gx_r / weights;
      data2[x2 + 1] = gx_g / weights;
      data2[x2 + 2] = gx_b / weights;
      data2[x2 + 3] = gx_a / weights_alpha;
     }
    }
    SpriteCanvas.width = width_source + widthX;
    SpriteCanvas.height = height_source + heightX;
    SpriteContext.clearRect(0, 0, width_source + widthX, height_source + heightX); //清除指定區域
    SpriteContext.putImageData(img2X, width_source, height_source);
    SpriteContext.drawImage(SpriteCanvas, width_source, height_source, widthX, heightX, 0, 0, width_source, height_source);//繪製在指定區域
    //document.querySelector("#TestImage2").src = SpriteCanvas.toDataURL();
    this._ctx.imageSmoothingEnabled = true; //圖形平滑處理
    this._ctx.imageSmoothingQuality = "high";
    L.BusMarkSize = img.size[0];
    //console.log("SpriteImage Resize OK!"); //顯示建立完成資訊
   }
   //------------------------------------------------------
   //this._ctx.globalAlpha = 0.5;
   //this._ctx.beginPath();
   //this._ctx.arc(p.x, p.y, layer.options.radius + 1, 0, 2 * Math.PI, false);
   //this._ctx.fillStyle = 'gray';
   //this._ctx.fill();
   //
   //this._ctx.lineWidth = 1;
   //this._ctx.strokeStyle = '#003300';
   //this._ctx.stroke();
   //------------------------------------------------------
   //L.RedrawUpdate++;
   if(layer.options.MarkType === "Bus") //檢查Marker類型是否為Bus
   {
    if((L.BusRouteFilter === true) && (L.BusRouteFilterUID !== "")) //檢查是否有開啟路線過濾
    {
     if(layer.options.RouteUID !== L.BusRouteFilterUID) //檢查是否不是指定RouteUID
     {
      return; //略過繪製
     }
     BusMarkDisplayLevel = 12;
    }
    else if((L.BusRouteFilterUID !== "") && (layer.options.RouteUID === L.BusRouteFilterUID))
    {
     BusMarkDisplayLevel = 12;
    }
    else
    {
     BusMarkDisplayLevel = 15;
    }
    if(img.opacity === 0.0) //檢查是否為不須繪製項目
    {
     return; //略過繪製
    }
   }
   this._ctx.globalAlpha = img.opacity; //設定透明度
   
   //L.RedrawCount++;
   //------------------------------------------------------
   if(img.rotate) //檢查是否有設定角度
   {
    this._ctx.save();
    this._ctx.translate(p.x, p.y);
    this._ctx.rotate((img.rotate * Math.PI) / 180);
    if(img.url === "@SpriteImage")
    {
     this._ctx.drawImage(SpriteCanvas, img.sprite[0] * 64, img.sprite[1] * 64, 64, 64, -img.size[0] / 2, -img.size[1] / 2, img.size[0], img.size[1]);
    }
    else
    {
     this._ctx.drawImage(SpriteCanvas, -img.size[0] / 2, -img.size[1] / 2, img.size[0], img.size[1]);
    }
    this._ctx.restore();
   }
   else
   {
    if(img.url === "@SpriteImage")
    {
     this._ctx.drawImage(SpriteCanvas, img.sprite[0] * 64, img.sprite[1] * 64, 64, 64, p.x - img.size[0] / 2, p.y - img.size[1] / 2, img.size[0], img.size[1]);
    }
    else
    {
     this._ctx.drawImage(SpriteCanvas, p.x - img.size[0] / 2, p.y - img.size[1] / 2, img.size[0], img.size[1]);
    }
   }
   //------------------------------------------------------

   LabelValue = "";
   if(layer.options.MarkType === "Bus") //檢查Marker類型是否為Bus
   {
    if(L.BusMarkLabel) //檢查是否有設定標籤
    {
     switch(L.BusMarkLabel) //檢查顯示標籤類型
     {
      case "RouteName": //主路線名稱
       LabelValue = String(layer.options.RouteName);
       break;
      case "SubRouteName": //子路線名稱
       LabelValue = String(layer.options.SubRouteName);
       break;
      case "PlateNumber": //車牌號碼
       LabelValue = String(layer.options.PlateNumb);
       break;
      default:
       LabelValue = "";
       break;
      //LabelValue = layer.options.RouteName + "\n" + layer.options.PlateNumb;
     }
    }
    else
    {
     LabelValue = String(layer.options.RouteName); //若無設定資料則預設顯示"主路線名稱"
    }      
    if(this._map.getZoom() < BusMarkDisplayLevel) //檢查縮放比例
    {
     LabelValue = "";
    }
   }
   else if(layer.options.MarkType === "Stop") //檢查Marker類型是否為Stop
   {
    if(L.BusStopMarkLabel) //檢查是否有設定標籤
    {
     switch(L.BusStopMarkLabel) //檢查顯示標籤類型
     {
      case "StopSequence": //站序
       LabelValue = String(layer.options.StopSequence);
       break;
      case "StopName": //站名
       LabelValue = String(layer.options.StopName);
       break;
      case "StopSequence&Name": //站序+站名
       LabelValue = String(layer.options.StopSequence + " " + layer.options.StopName);
       break;
      default:
       LabelValue = "";
       break;
     }
    }
    else
    {
     LabelValue = String(layer.options.StopSequence + " " + layer.options.StopName); //若無設定資料則預設顯示"站序+站名"
    }     
    if(this._map.getZoom() < 14) //檢查縮放比例
    {
     LabelValue = "";
    }
    else if(this._map.getZoom() < 15)
    {
     if(((L.BusStopMarkLabel === "StopSequence") || (L.BusStopMarkLabel === "StopSequence&Name")))
     {
      LabelValue = String(layer.options.StopSequence); //只顯示站序
     }
     else
     {
      LabelValue = "";
     }
    }
    
    //if(typeof Bus_Stop_Display !== "undefined") //檢查是否有設定顯示站名
    //{
    // if((layer.options.MarkType === "Stop") && (Bus_Stop_Display.checked === false))
    // {
    //  LabelValue = "";
    // }
    //}
   }
   
   if(LabelValue !== "") //檢查是否有標籤內容
   {
    //this._ctx.save();
    this._ctx.textBaseline = "middle";
    this._ctx.font = "bold " + String(img.size[0]) + "px 'Microsoft JhengHei', '微軟正黑體', 'SF Pro TC', 'SF Pro Display', 'SF Pro Icons', 'PingFang TC', 'Helvetica Neue', 'Helvetica', 'sans-serif', '文泉驛正黑', 'WenQuanYi Zen Hei', 'Droid Sans'"; //字型
    this._ctx.strokeStyle = "#000000"; //文字外框顏色
    this._ctx.lineWidth = 4.0; //Stroke粗細(文字外框粗細)
    this._ctx.miterLimit = 2.0; //Stroke尖刺限制
    
    if(layer.options.MarkType === "Bus")
    {
     this._ctx.fillStyle = "#ffffff"; //公車文字顏色
    }
    else if(layer.options.MarkType === "Stop")
    {
     this._ctx.fillStyle = "#ffffa0"; //站牌文字顏色
    }
    
    var lineheight = 15;
    var lines = LabelValue.split("\n");
    LabelOffsetX = img.size[0] / 2 + 3; //標籤X軸
    LabelOffsetY = 0; //標籤Y軸(使用textBaseline置中)
    for (var _i = 0; _i < lines.length; _i++) //分行繪製文字
    {
     if((L.BusRouteFilterUID !== "") && (L.BusRouteFilterUID !== null))
     {
      if(layer.options.RouteUID === L.BusRouteFilterUID) //檢查是否是指定RouteUID
      { 
       this._ctx.strokeStyle = "#000000"; //文字外框顏色
       this._ctx.lineWidth = 9.0; //Stroke粗細(文字外框粗細)
       this._ctx.strokeText(lines[_i], p.x + LabelOffsetX, p.y + LabelOffsetY + _i * lineheight);
       
       this._ctx.strokeStyle = "#ffffff"; //文字外框顏色
       this._ctx.lineWidth = 6.0; //Stroke粗細(文字外框粗細)
       this._ctx.strokeText(lines[_i], p.x + LabelOffsetX, p.y + LabelOffsetY + _i * lineheight);
       
       this._ctx.lineWidth = 4.0; //Stroke粗細(文字外框粗細)
       
        //文字外框顏色
       switch(String(layer.options.Direction)) //檢查去返程方向
       {
        case "0": //去程
         this._ctx.strokeStyle = "#ff1111";
         break;
        case "1": //返程
         this._ctx.strokeStyle = "#dd6600";
         break;
        case "2": //迴圈
         this._ctx.strokeStyle = "#0066ff";
         break;
        case "255": //未知
         this._ctx.strokeStyle = "#333333";
         break;
        default: //其他
         this._ctx.strokeStyle = "#333333";
       }       
      }
     }     
     
     this._ctx.strokeText(lines[_i], p.x + LabelOffsetX, p.y + LabelOffsetY + _i * lineheight);     
     this._ctx.fillText(lines[_i], p.x + LabelOffsetX, p.y + LabelOffsetY + _i * lineheight);
    }
    //this._ctx.restore();
   }   
   //------------------------------------------------------
  }
 });
 //------------------------------------------------------------------------------------------------------------
 var angleCrds = function angleCrds(map, prevLatlng, latlng)
 {
  if (!latlng || !prevLatlng)
  {
   return 0;
  }
  var pxStart = map.project(prevLatlng);
  var pxEnd = map.project(latlng);
  return ((Math.atan2(pxStart.y - pxEnd.y, pxStart.x - pxEnd.x) / Math.PI) * 180 - 90);
 };
 //------------------------------------------------------------------------------------------------------------
 var defaultImgOptions =
 {
  rotate: 0,
  size: [14, 14],
  offset: {x: 0, y: 0},
  opacity: 1.0,
  sprite: [0, 0, 0, 0]
 };
 //------------------------------------------------------------------------------------------------------------
 var CanvasMarker = L.CircleMarker.extend(
 {
  _updatePath: function _updatePath()
  {
   if (
    !this.options.img ||
    !this.options.img.url ||
    this._map.IS_AnimationSet === true)
   {
    return;
   }
   if (!this.options.img.el)
   {
    //this.options.img = {...defaultImgOptions, ...this.options.img};
    this.options.img.rotate += angleCrds(this._map, this.options.prevLatlng, this._latlng);
    if(this.options.img.url === "@SpriteImage")
    {
     this.options.img.el = "@SpriteImage";
     SpriteImage.onload = function ()
     {
      this.redraw;
     };
     SpriteImage.onerror = function ()
     {
      this.options.img = null;
     };
    }
    else
    {
     var img = document.createElement("img");
     img.src = this.options.img.url;
     this.options.img.el = img;
     img.onload = function ()
     {
      this.redraw;
     };
     img.onerror = function ()
     {
      this.options.img = null;
     };
    }
   }
   else
   {
    this._renderer._updateImg(this);
   }
  }
 });
 //------------------------------------------------------------------------------------------------------------
 L.canvasMarker = function ()
 {
  for(var _len = arguments.length, opt = new Array(_len), _key = 0; _key < _len; _key++)
  {
   opt[_key] = arguments[_key];
  }
  //try {
  //  var i = opt.indexOf(function (o)
  //  {
  //    return _typeof(o) === "object" && o.img;
  //  });
  //  if (i + 1) {
  //    //if (!opt[i].radius && opt[i].img && opt[i].img.size)
  //    //{
  //    // opt[i].radius = Math.ceil(Math.max(...opt[i].img.size) / 2);
  //    //}
  //    opt[i].radius = Math.max.apply(Math, _toConsumableArray(opt[i].img.size)) / 2;
  //    //if (opt[i].pane) //清除PANE設定
  //    //{
  //    opt[i].pane = "shadowPane";
  //    //delete opt[i].pane;
  //    //}
  //  }
  //} catch (e) {
  //  console.log("L.canvasMarker Try Catch ERROR! - " + e);
  //}
  return _construct(CanvasMarker, opt);
 };
 //------------------------------------------------------------------------------------------------------------
});
//============================================================================================================